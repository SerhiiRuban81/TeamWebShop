@using TeamWebShop.Models.ViewModels.Categories
@model CreateCategoryVM
@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
<h4>Category</h4>
<hr />
<div class="container mt-5">
    <h2 class="text-center mb-4">Create Category</h2>
    <form asp-action="Create">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="mb-3">
            <label asp-for="CategoryDTO.CategoryName" class="control-label"></label>
            <input asp-for="CategoryDTO.CategoryName" class="form-control" />
            <span asp-validation-for="CategoryDTO.CategoryName" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label for="parentCategoryId" class="control-label"></label>
            <select id="parentCategoryId" name="parentCategoryId[]"
                    class="form-control" asp-items="Model.ParentCategories"
                    onchange="GetChildCategories(event)">
                <option value="@(null)">Немає</option>
            </select>
        </div>
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-success">Create</button>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div> 
    </form>
</div>
@section Scripts {
    <script>
        async function GetChildCategories(e) {
            let parentCategoryId = e.target.value;
            let resp = await fetch(`/categories/getchildcategories/${parentCategoryId}`,
                {
                    method: "GET"
                });
            let firstChilds = document.getElementById("firstLevelChilds");
            if (resp.ok === true) {
                let text = await resp.text();
                let d1 = document.createElement("div");
                d1.innerHTML = text;
                let firstSelectDiv = e.target.parentElement;

                console.log("FirstChilds", firstChilds);
                d1.firstChild.id = "firstLevelChilds";
                if (firstChilds) {
                    firstSelectDiv.nextElementSibling.replaceWith(d1.firstChild);
                }
                else {
                    firstSelectDiv.after(d1.firstChild);
                }
            }
            else {
                if (firstChilds)
                    firstChilds.remove();
            }
        }
    </script>
}